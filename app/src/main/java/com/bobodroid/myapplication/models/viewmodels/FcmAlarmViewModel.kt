// app/src/main/java/com/bobodroid/myapplication/models/viewmodels/FcmAlarmViewModel.kt

package com.bobodroid.myapplication.models.viewmodels

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.bobodroid.myapplication.MainActivity.Companion.TAG
import com.bobodroid.myapplication.models.datamodels.repository.InvestRepository
import com.bobodroid.myapplication.models.datamodels.repository.LatestRateRepository
import com.bobodroid.myapplication.models.datamodels.repository.UserRepository
import com.bobodroid.myapplication.models.datamodels.roomDb.*
import com.bobodroid.myapplication.models.datamodels.service.BackupApi.BackupApi
import com.bobodroid.myapplication.models.datamodels.service.BackupApi.CreateBackupDto
import com.bobodroid.myapplication.models.datamodels.service.BackupApi.CurrencyRecordDto
import com.bobodroid.myapplication.models.datamodels.service.UserApi.Rate
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.BatchUpdateRecordAlertsRequest
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.ChannelSettings
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.NotificationApi
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.NotificationConditions
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.NotificationHistoryItem
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.NotificationSettings
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.NotificationStats
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.QuietHours
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.RecordProfitAlert
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.RecordWithAlert
import com.bobodroid.myapplication.models.datamodels.service.notificationApi.UpdateNotificationSettingsRequest
import com.bobodroid.myapplication.models.datamodels.useCases.FcmUseCases
import com.bobodroid.myapplication.models.repository.SettingsRepository
import com.bobodroid.myapplication.util.result.onError
import com.bobodroid.myapplication.util.result.onSuccess
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class FcmAlarmViewModel @Inject constructor(
    private val userRepository: UserRepository,
    private val fcmUseCases: FcmUseCases,
    private val latestRateRepository: LatestRateRepository,
    private val settingsRepository: SettingsRepository,
    private val investRepository: InvestRepository
) : ViewModel() {

    // ==================== Í≥µÌÜµ State ====================

    private val deviceId = MutableStateFlow("")

    // ‚úÖ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å Ïó¨Î∂Ä ÌîåÎûòÍ∑∏ (Ï§ëÎ≥µ Ïã§Ìñâ Î∞©ÏßÄ)
    private var isAlarmDataInitialized = false

    val isPremium = userRepository.userData
        .map { it?.localUserData?.isPremium ?: false }
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = false
        )

    val selectedCurrency = settingsRepository.selectedCurrency.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = CurrencyType.USD
    )

    // ==================== Î™©ÌëúÌôòÏú® State (12Í∞ú ÌÜµÌôî ÏßÄÏõê) ====================

    private val _targetRate = MutableStateFlow(TargetRates.empty())
    val targetRateFlow = _targetRate.asStateFlow()

    // ==================== ÏïåÎ¶º ÏÑ§Ï†ï State ====================

    private val _notificationSettings = MutableStateFlow<NotificationSettings?>(null)
    val notificationSettings = _notificationSettings.asStateFlow()

    // ==================== ÏïåÎ¶º ÌûàÏä§ÌÜ†Î¶¨ State ====================

    private val _notificationHistory = MutableStateFlow<List<NotificationHistoryItem>>(emptyList())
    val notificationHistory = _notificationHistory.asStateFlow()

    // ==================== ÏïåÎ¶º ÌÜµÍ≥Ñ State ====================

    private val _notificationStats = MutableStateFlow<NotificationStats?>(null)
    val notificationStats = _notificationStats.asStateFlow()

    // ==================== UI State ====================

    private val _alarmUiState = MutableStateFlow(AlarmUiState())
    val alarmUiState = _alarmUiState.asStateFlow()

    private val _isLoading = MutableStateFlow(false)
    val isLoading = _isLoading.asStateFlow()

    private val _error = MutableStateFlow<String?>(null)
    val error = _error.asStateFlow()

    // ==================== üÜï ÏàòÏùµÎ•† ÏïåÎ¶º State ====================

    private val _recordsWithAlerts = MutableStateFlow<List<RecordWithAlert>>(emptyList())
    val recordsWithAlerts: StateFlow<List<RecordWithAlert>> = _recordsWithAlerts.asStateFlow()

    private val _profitAlertLoading = MutableStateFlow(false)
    val profitAlertLoading: StateFlow<Boolean> = _profitAlertLoading.asStateFlow()

    private val _profitAlertMessage = MutableStateFlow<String?>(null)
    val profitAlertMessage: StateFlow<String?> = _profitAlertMessage.asStateFlow()

    private val _saveSuccess = MutableStateFlow(false)
    val saveSuccess: StateFlow<Boolean> = _saveSuccess.asStateFlow()

    // ==================== Ï¥àÍ∏∞Ìôî ====================

    init {
        // ‚úÖ ÏµúÏã† ÌôòÏú® Íµ¨ÎèÖ
        viewModelScope.launch {
            receivedLatestRate()
        }

        // ‚úÖ userData Flow Íµ¨ÎèÖ (ÏûêÎèô Ï¥àÍ∏∞Ìôî)
        viewModelScope.launch {
            userRepository.userData
                .filterNotNull()
                .collect { userData ->
                    Log.d(TAG("FcmAlarmViewModel", "init"), "UserData ÏàòÏã†: ${userData.localUserData.id}")

                    // deviceId ÏÑ§Ï†ï
                    deviceId.emit(userData.localUserData.id.toString())

                    // ‚úÖ Î™©ÌëúÌôòÏú® Ï¥àÍ∏∞Ìôî (12Í∞ú ÌÜµÌôî ÏßÄÏõê)
                    userData.exchangeRates?.let {
                        initTarRates(it)
                    }

                    // ‚úÖ Ìïú Î≤àÎßå Ïã§Ìñâ (Ï§ëÎ≥µ Î∞©ÏßÄ)
                    if (!isAlarmDataInitialized && deviceId.value.isNotEmpty()) {
                        isAlarmDataInitialized = true

                        Log.d(TAG("FcmAlarmViewModel", "init"), "ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî ÏãúÏûë (deviceId: ${deviceId.value})")

                        // ÏïåÎ¶º ÏÑ§Ï†ï/ÌûàÏä§ÌÜ†Î¶¨/ÌÜµÍ≥Ñ Î°úÎìú
                        loadNotificationSettings()
                        loadNotificationHistory()
                        loadNotificationStats()
                        loadRecordsWithAlerts()

                        // Î™©ÌëúÌôòÏú® Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Íµ¨ÎèÖ
                        fcmUseCases.targetRateUpdateUseCase(
                            onUpdate = {
                                viewModelScope.launch {
                                    _targetRate.emit(it)
                                }
                            }
                        )
                    }
                }
        }
    }

    private suspend fun receivedLatestRate() {
        latestRateRepository.latestRateFlow.collect { latestRate ->
            val uiState = _alarmUiState.value.copy(
                recentRate = latestRate
            )
            _alarmUiState.emit(uiState)
        }
    }

    fun initTarRates(targetRates: TargetRates) {
        _targetRate.value = targetRates
        Log.d(TAG("FcmAlarmViewModel", "initTarRates"),
            "Î™©ÌëúÌôòÏú® Ï¥àÍ∏∞Ìôî ÏôÑÎ£å - ÌÜµÌôî ${targetRates.getAllCurrencies().size}Í∞ú, Ï¥ù ${targetRates.getTotalCount()}Í∞ú Î™©ÌëúÌôòÏú®")
    }

    fun updateCurrentForeignCurrency(currency: CurrencyType): Boolean {
        return settingsRepository.setSelectedCurrency(currency)
    }

    // ==================== Î™©ÌëúÌôòÏú® Í¥ÄÎ¶¨ (12Í∞ú ÌÜµÌôî ÏßÄÏõê) ====================

    fun addTargetRate(
        addRate: Rate,
        type: RateType
    ) {
        viewModelScope.launch {
            fcmUseCases.targetRateAddUseCase(
                deviceId = deviceId.value,
                targetRates = targetRateFlow.value,
                type = type,
                newRate = addRate
            ).onSuccess { targetRate, _ ->
                Log.d(TAG("FcmAlarmViewModel", "addTargetRate"),
                    "Success: ${type.currency.koreanName} ${type.direction} - ${addRate.rate}")
                _targetRate.emit(targetRate)
            }.onError { error ->
                Log.e(TAG("FcmAlarmViewModel", "addTargetRate"), "Error", error.exception)
                _error.value = error.message
            }
        }
    }

    fun deleteTargetRate(
        deleteRate: Rate,
        type: RateType
    ) {
        viewModelScope.launch {
            fcmUseCases.targetRateDeleteUseCase(
                deviceId = deviceId.value,
                targetRates = targetRateFlow.value,
                type = type,
                deleteRate = deleteRate
            ).onSuccess { updateTargetRate, _ ->
                Log.d(TAG("FcmAlarmViewModel", "deleteTargetRate"),
                    "Success: ${type.currency.koreanName} ${type.direction} - ${deleteRate.rate}")
                _targetRate.emit(updateTargetRate)
            }.onError { error ->
                Log.e(TAG("FcmAlarmViewModel", "deleteTargetRate"), "Error", error.exception)
                _error.value = error.message
            }
        }
    }

    fun getTargetRates(currency: CurrencyType, direction: RateDirection): List<Rate> {
        return targetRateFlow.value.getRates(currency, direction)
    }

    fun hasCurrencyTargetRates(currency: CurrencyType): Boolean {
        return targetRateFlow.value.hasCurrency(currency)
    }

    // ==================== ÏïåÎ¶º ÏÑ§Ï†ï Í¥ÄÎ¶¨ ====================

    fun loadNotificationSettings() {
        viewModelScope.launch {
            _isLoading.value = true
            fcmUseCases.getNotificationSettingsUseCase(deviceId.value)
                .onSuccess { settings, _ ->
                    Log.d(TAG("FcmAlarmViewModel", "loadSettings"), "Success")
                    _notificationSettings.value = settings
                }
                .onError { error ->
                    Log.e(TAG("FcmAlarmViewModel", "loadSettings"), "Error", error.exception)
                    _error.value = "ÏÑ§Ï†ïÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§"
                }
            _isLoading.value = false
        }
    }

    fun toggleGlobalNotification(enabled: Boolean) {
        updateSettings(
            UpdateNotificationSettingsRequest(globalEnabled = enabled)
        )
    }

    fun toggleRateAlert(enabled: Boolean) {
        val current = _notificationSettings.value?.rateAlert ?: ChannelSettings()
        updateSettings(
            UpdateNotificationSettingsRequest(
                rateAlert = current.copy(enabled = enabled)
            )
        )
    }

    fun toggleProfitAlert(enabled: Boolean) {
        if (!isPremium.value) {
            _error.value = "ÌîÑÎ¶¨ÎØ∏ÏóÑ Í∏∞Îä•ÏûÖÎãàÎã§"
            return
        }

        val current = _notificationSettings.value?.recordAlert ?: ChannelSettings()
        updateSettings(
            UpdateNotificationSettingsRequest(
                recordAlert = current.copy(enabled = enabled)
            )
        )
    }

    fun updateRecordAgeTime(time: String) {
        val current = _notificationSettings.value?.conditions ?: NotificationConditions()
        updateSettings(
            UpdateNotificationSettingsRequest(
                conditions = current.copy(
                    recordAgeAlert = current.recordAgeAlert.copy(alertTime = time)
                )
            )
        )
    }

    fun updateRecordAgeDays(days: Int) {
        val current = _notificationSettings.value?.conditions ?: NotificationConditions()
        updateSettings(
            UpdateNotificationSettingsRequest(
                conditions = current.copy(
                    recordAgeAlert = current.recordAgeAlert.copy(alertDays = days)
                )
            )
        )
    }

    fun updateDailySummaryTime(time: String) {
        val current = _notificationSettings.value?.conditions ?: NotificationConditions()
        updateSettings(
            UpdateNotificationSettingsRequest(
                conditions = current.copy(
                    dailySummary = current.dailySummary.copy(summaryTime = time)
                )
            )
        )
    }

    fun updateQuietHours(quietHours: QuietHours) {
        updateSettings(
            UpdateNotificationSettingsRequest(quietHours = quietHours)
        )
    }

    fun updateMinProfitPercent(percent: Double) {
        val current = _notificationSettings.value?.conditions ?: NotificationConditions()
        updateSettings(
            UpdateNotificationSettingsRequest(
                conditions = current.copy(minProfitPercent = percent)
            )
        )
    }

    private fun updateSettings(request: UpdateNotificationSettingsRequest) {
        viewModelScope.launch {
            fcmUseCases.updateNotificationSettingsUseCase(deviceId.value, request)
                .onSuccess { settings, _ ->
                    Log.d(TAG("FcmAlarmViewModel", "updateSettings"), "Success")
                    _notificationSettings.value = settings
                }
                .onError { error ->
                    Log.e(TAG("FcmAlarmViewModel", "updateSettings"), "Error", error.exception)
                    _error.value = "ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®"
                }
        }
    }

    // ==================== ÏïåÎ¶º ÌûàÏä§ÌÜ†Î¶¨ Í¥ÄÎ¶¨ ====================

    fun loadNotificationHistory() {
        viewModelScope.launch {
            fcmUseCases.getNotificationHistoryUseCase(deviceId.value)
                .onSuccess { history, _ ->
                    Log.d(TAG("FcmAlarmViewModel", "loadHistory"), "Success: ${history.size}Í∞ú")
                    _notificationHistory.value = history
                }
                .onError { error ->
                    Log.e(TAG("FcmAlarmViewModel", "loadHistory"), "Error", error.exception)
                }
        }
    }

    fun markAsRead(notificationId: String) {
        viewModelScope.launch {
            fcmUseCases.markAsReadUseCase(notificationId)
                .onSuccess { _, _ ->
                    Log.d(TAG("FcmAlarmViewModel", "markAsRead"), "Success")
                    _notificationHistory.value = _notificationHistory.value.map {
                        if (it.id == notificationId) {
                            it.copy(status = "READ")
                        } else it
                    }
                }
                .onError { error ->
                    Log.e(TAG("FcmAlarmViewModel", "markAsRead"), "Error", error.exception)
                }
        }
    }

    // ==================== ÏïåÎ¶º ÌÜµÍ≥Ñ Í¥ÄÎ¶¨ ====================

    fun loadNotificationStats() {
        viewModelScope.launch {
            fcmUseCases.getNotificationStatsUseCase(deviceId.value)
                .onSuccess { stats, _ ->
                    Log.d(TAG("FcmAlarmViewModel", "loadStats"), "Success")
                    _notificationStats.value = stats
                }
                .onError { error ->
                    Log.e(TAG("FcmAlarmViewModel", "loadStats"), "Error", error.exception)
                }
        }
    }

    // ==================== ÌÖåÏä§Ìä∏ ====================

    fun sendTestNotification() {
        viewModelScope.launch {
            fcmUseCases.sendTestNotificationUseCase(deviceId.value)
                .onSuccess { _, _ ->
                    Log.d(TAG("FcmAlarmViewModel", "sendTest"), "Success")
                }
                .onError { error ->
                    Log.e(TAG("FcmAlarmViewModel", "sendTest"), "Error", error.exception)
                    _error.value = "ÌÖåÏä§Ìä∏ ÏïåÎ¶º Ï†ÑÏÜ° Ïã§Ìå®"
                }
        }
    }

    // ==================== üÜï ÏàòÏùµÎ•† ÏïåÎ¶º Í¥ÄÎ¶¨ ====================

    // app/src/main/java/com/bobodroid/myapplication/models/viewmodels/FcmAlarmViewModel.kt

    fun loadRecordsWithAlerts() {
        viewModelScope.launch {
            try {
                _profitAlertLoading.value = true

                val unsoldRecords = investRepository.getUnsoldRecords().first()

                Log.d(TAG("FcmAlarmViewModel", "loadRecordsWithAlerts"), "Î≥¥Ïú†Ï§ë Í∏∞Î°ù: ${unsoldRecords.size}Í∞ú")

                if (deviceId.value.isEmpty()) {
                    _profitAlertMessage.value = "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§"
                    return@launch
                }

                val settingsResponse = NotificationApi.service.getNotificationSettings(deviceId.value)

                val recordsWithAlerts = unsoldRecords.map { record ->
                    val existingAlert = settingsResponse.data?.conditions?.recordProfitAlerts
                        ?.find { it.recordId == record.id.toString() }

                    RecordWithAlert(
                        recordId = record.id.toString(),
                        currencyCode = record.currencyCode,
                        categoryName = record.categoryName ?: "",
                        date = record.date ?: "",
                        money = record.money ?: "0",
                        exchangeMoney = record.exchangeMoney ?: "0",
                        buyRate = record.buyRate ?: "0",
                        profitPercent = existingAlert?.alertPercent,  // Í∏∞Ï°¥ ÏÑ§Ï†ïÍ∞í ÎòêÎäî null// Í∏∞Ï°¥ ÏÑ§Ï†ï ÏûàÏúºÎ©¥ true
                    )
                }

                _recordsWithAlerts.value = recordsWithAlerts
                Log.d(TAG("FcmAlarmViewModel", "loadRecordsWithAlerts"), "ÏÑ§Ï†ï ÏôÑÎ£å: ${recordsWithAlerts.size}Í∞ú")

            } catch (e: Exception) {
                Log.e(TAG("FcmAlarmViewModel", "loadRecordsWithAlerts"), "Î°úÎìú Ïã§Ìå®", e)
                _profitAlertMessage.value = "Í∏∞Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${e.message}"
            } finally {
                _profitAlertLoading.value = false
            }
        }
    }

    // ÏïåÎ¶º ÌÜ†Í∏Ä Ìï®Ïàò Ï∂îÍ∞Ä
    fun toggleRecordAlert(recordId: String, enabled: Boolean) {
        _recordsWithAlerts.value = _recordsWithAlerts.value.map { record ->
            if (record.recordId == recordId) {
                record.copy(
                    enabled = enabled,
                    profitPercent = if (enabled && record.profitPercent == null) 0.4f else record.profitPercent
                )
            } else {
                record
            }
        }
    }

    fun updateRecordProfitPercent(recordId: String, percent: Float) {
        _recordsWithAlerts.value = _recordsWithAlerts.value.map { record ->
            if (record.recordId == recordId) {
                record.copy(profitPercent = percent)
            } else {
                record
            }
        }
    }

    fun saveRecordAlerts() {
        viewModelScope.launch {
            try {
                _profitAlertLoading.value = true
                _saveSuccess.value = false

                if (deviceId.value.isEmpty()) {
                    _profitAlertMessage.value = "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§"
                    return@launch
                }

                Log.d(TAG("FcmAlarmViewModel", "saveRecordAlerts"), "1Îã®Í≥Ñ: Î∞±ÏóÖ ÏãúÏûë")

                val backupSuccess = triggerBackup(deviceId.value)

                if (!backupSuccess) {
                    _profitAlertMessage.value = "Î∞±ÏóÖÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÏïåÎ¶º ÏÑ§Ï†ïÏùÑ Ï†ÄÏû•Ìï† Ïàò ÏóÜÏäµÎãàÎã§."
                    return@launch
                }

                Log.d(TAG("FcmAlarmViewModel", "saveRecordAlerts"), "Î∞±ÏóÖ ÏôÑÎ£å")
                Log.d(TAG("FcmAlarmViewModel", "saveRecordAlerts"), "2Îã®Í≥Ñ: ÏïåÎ¶º ÏÑ§Ï†ï Ï†ÄÏû• ÏãúÏûë")

                // ‚úÖ enabled=trueÏù¥Í≥† profitPercentÍ∞Ä nullÏù¥ ÏïÑÎãå Í≤ÉÎßå ÌïÑÌÑ∞ÎßÅ
                val enabledRecords = _recordsWithAlerts.value.filter {
                    it.enabled && it.profitPercent != null
                }

                val recordAlerts = enabledRecords.map { record ->
                    RecordProfitAlert(
                        recordId = record.recordId,
                        alertPercent = record.profitPercent!!,
                        alerted = false,
                        lastAlertedAt = null
                    )
                }

                val request = BatchUpdateRecordAlertsRequest(
                    recordProfitAlerts = recordAlerts
                )

                val response = NotificationApi.service.batchUpdateRecordAlerts(
                    deviceId = deviceId.value,
                    request = request
                )

                if (response.success) {
                    _saveSuccess.value = true
                    _profitAlertMessage.value = "ÏïåÎ¶º ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§ (${enabledRecords.size}Í∞ú)"
                    Log.d(TAG("FcmAlarmViewModel", "saveRecordAlerts"), "Ï†ÄÏû• ÏÑ±Í≥µ: ${recordAlerts.size}Í∞ú")
                } else {
                    _profitAlertMessage.value = "ÏïåÎ¶º ÏÑ§Ï†ï Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${response.message}"
                }

            } catch (e: Exception) {
                Log.e(TAG("FcmAlarmViewModel", "saveRecordAlerts"), "Ï†ÄÏû• Ïã§Ìå®", e)
                _profitAlertMessage.value = "Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${e.message}"
            } finally {
                _profitAlertLoading.value = false
            }
        }
    }

    private suspend fun triggerBackup(deviceId: String): Boolean {
        return try {
            val currentUserData = userRepository.userData.filterNotNull().first()
            val localUser = currentUserData.localUserData ?: run {
                Log.e(TAG("FcmAlarmViewModel", "triggerBackup"), "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÜÏùå")
                return false
            }

            val allRecords = investRepository.getAllCurrencyRecords().first()

            Log.d(TAG("FcmAlarmViewModel", "triggerBackup"), "Î∞±ÏóÖ ÎåÄÏÉÅ Í∏∞Î°ù: ${allRecords.size}Í∞ú")

            val currencyRecords = allRecords.map { record ->
                CurrencyRecordDto(
                    id = record.id.toString(),
                    currencyCode = record.currencyCode,
                    date = record.date ?: "",
                    money = record.money ?: "0",
                    rate = record.rate ?: "0",
                    buyRate = record.buyRate ?: "0",
                    exchangeMoney = record.exchangeMoney ?: "0",
                    profit = record.profit ?: "0",
                    expectProfit = record.expectProfit ?: "0",
                    categoryName = record.categoryName ?: "",
                    memo = record.memo ?: "",
                    sellRate = record.sellRate,
                    sellProfit = record.sellProfit,
                    sellDate = record.sellDate,
                    recordColor = record.recordColor ?: false
                )
            }

            val backupDto = CreateBackupDto(
                deviceId = deviceId,
                socialId = localUser.socialId,
                socialType = localUser.socialType,
                currencyRecords = currencyRecords
            )

            val backupResponse = BackupApi.backupService.createBackupWithDto(backupDto)

            if (backupResponse.success) {
                Log.d(TAG("FcmAlarmViewModel", "triggerBackup"), "Î∞±ÏóÖ ÏÑ±Í≥µ: ${allRecords.size}Í∞ú")
                true
            } else {
                Log.e(TAG("FcmAlarmViewModel", "triggerBackup"), "Î∞±ÏóÖ Ïã§Ìå®: ${backupResponse.message}")
                false
            }

        } catch (e: Exception) {
            Log.e(TAG("FcmAlarmViewModel", "triggerBackup"), "Î∞±ÏóÖ ÏóêÎü¨", e)
            false
        }
    }

    fun clearProfitAlertMessage() {
        _profitAlertMessage.value = null
    }

    fun refreshRecordAlerts() {
        loadRecordsWithAlerts()
    }

    // ==================== ÏóêÎü¨ Ï≤òÎ¶¨ ====================

    fun clearError() {
        _error.value = null
    }


    // ==================== ÏïåÎ¶º ÌûàÏä§ÌÜ†Î¶¨ Í¥ÄÎ¶¨ - ÏÇ≠Ï†ú Í∏∞Îä• Ï∂îÍ∞Ä ====================

    /**
     * Í∞úÎ≥Ñ ÏïåÎ¶º ÏÇ≠Ï†ú
     */
    fun deleteNotification(notificationId: String) {
        viewModelScope.launch {
            fcmUseCases.deleteNotificationUseCase(notificationId)
                .onSuccess { _, message ->
                    Log.d(TAG("FcmAlarmViewModel", "deleteNotification"), "Success: $message")

                    // Î°úÏª¨ Î¶¨Ïä§Ìä∏ÏóêÏÑú Ï†úÍ±∞
                    _notificationHistory.value = _notificationHistory.value.filter {
                        it.id != notificationId
                    }
                }
                .onError { error ->
                    Log.e(TAG("FcmAlarmViewModel", "deleteNotification"), "Error", error.exception)
                    _error.value = "ÏïåÎ¶º ÏÇ≠Ï†ú Ïã§Ìå®"
                }
        }
    }

    /**
     * Î™®Îì† ÏïåÎ¶º ÏÇ≠Ï†ú
     */
    fun deleteAllNotifications() {
        viewModelScope.launch {
            fcmUseCases.deleteAllNotificationsUseCase(deviceId.value)
                .onSuccess { count, message ->
                    Log.d(TAG("FcmAlarmViewModel", "deleteAll"), "Success: $count Í∞ú ÏÇ≠Ï†ú")

                    // Î°úÏª¨ Î¶¨Ïä§Ìä∏ ÎπÑÏö∞Í∏∞
                    _notificationHistory.value = emptyList()

                    // ÌÜµÍ≥Ñ ÏÉàÎ°úÍ≥†Ïπ®
                    loadNotificationStats()
                }
                .onError { error ->
                    Log.e(TAG("FcmAlarmViewModel", "deleteAll"), "Error", error.exception)
                    _error.value = "Ï†ÑÏ≤¥ ÏÇ≠Ï†ú Ïã§Ìå®"
                }
        }
    }

    /**
     * ÏùΩÏùÄ ÏïåÎ¶ºÎßå ÏÇ≠Ï†ú
     */
    fun deleteReadNotifications() {
        viewModelScope.launch {
            fcmUseCases.deleteReadNotificationsUseCase(deviceId.value)
                .onSuccess { count, message ->
                    Log.d(TAG("FcmAlarmViewModel", "deleteRead"), "Success: $count Í∞ú ÏÇ≠Ï†ú")

                    // Î°úÏª¨ Î¶¨Ïä§Ìä∏ÏóêÏÑú ÏùΩÏùÄ ÏïåÎ¶º Ï†úÍ±∞
                    _notificationHistory.value = _notificationHistory.value.filter {
                        it.status == "sent" // ÏùΩÏßÄ ÏïäÏùÄ Í≤ÉÎßå ÎÇ®ÍπÄ
                    }

                    // ÌÜµÍ≥Ñ ÏÉàÎ°úÍ≥†Ïπ®
                    loadNotificationStats()
                }
                .onError { error ->
                    Log.e(TAG("FcmAlarmViewModel", "deleteRead"), "Error", error.exception)
                    _error.value = "ÏùΩÏùÄ ÏïåÎ¶º ÏÇ≠Ï†ú Ïã§Ìå®"
                }
        }
    }

    /**
     * Ïò§ÎûòÎêú ÏïåÎ¶º ÏÇ≠Ï†ú (Í∏∞Î≥∏ 30Ïùº)
     */
    fun deleteOldNotifications(days: Int = 30) {
        viewModelScope.launch {
            fcmUseCases.deleteOldNotificationsUseCase(deviceId.value, days)
                .onSuccess { count, message ->
                    Log.d(TAG("FcmAlarmViewModel", "deleteOld"), "Success: $count Í∞ú ÏÇ≠Ï†ú")

                    // ÌûàÏä§ÌÜ†Î¶¨ ÏÉàÎ°úÍ≥†Ïπ®
                    loadNotificationHistory()

                    // ÌÜµÍ≥Ñ ÏÉàÎ°úÍ≥†Ïπ®
                    loadNotificationStats()
                }
                .onError { error ->
                    Log.e(TAG("FcmAlarmViewModel", "deleteOld"), "Error", error.exception)
                    _error.value = "Ïò§ÎûòÎêú ÏïåÎ¶º ÏÇ≠Ï†ú Ïã§Ìå®"
                }
        }
    }
}

data class AlarmUiState(
    val recentRate: ExchangeRate = ExchangeRate()
)